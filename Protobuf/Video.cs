// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from video.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class VideoReflection {

    #region Descriptor
    /// <summary>File descriptor for video.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VideoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt2aWRlby5wcm90bxIIcHJvdG9jb2wieAoKUHJvY2Vzc2luZxIOCgZwYXJh",
            "bTEYASABKAESDgoGcGFyYW0yGAIgASgBIkoKBFR5cGUSCQoFQ0FOTlkQABII",
            "CgRGQUNFEAESDgoKVVBQRVJfQk9EWRACEg4KCkxPV0VSX0JPRFkQBBINCglG",
            "VUxMX0JPRFkQBSIrCgpDb25uZWN0aW9uEgwKBHBvcnQYASABKA0SDwoHY2Ft",
            "ZXJhcxgCIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Processing), global::Protocol.Processing.Parser, new[]{ "Param1", "Param2" }, null, new[]{ typeof(global::Protocol.Processing.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Connection), global::Protocol.Connection.Parser, new[]{ "Port", "Cameras" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Processing : pb::IMessage<Processing> {
    private static readonly pb::MessageParser<Processing> _parser = new pb::MessageParser<Processing>(() => new Processing());
    public static pb::MessageParser<Processing> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.VideoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Processing() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Processing(Processing other) : this() {
      param1_ = other.param1_;
      param2_ = other.param2_;
    }

    public Processing Clone() {
      return new Processing(this);
    }

    /// <summary>Field number for the "param1" field.</summary>
    public const int Param1FieldNumber = 1;
    private double param1_;
    public double Param1 {
      get { return param1_; }
      set {
        param1_ = value;
      }
    }

    /// <summary>Field number for the "param2" field.</summary>
    public const int Param2FieldNumber = 2;
    private double param2_;
    public double Param2 {
      get { return param2_; }
      set {
        param2_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Processing);
    }

    public bool Equals(Processing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Param1 != other.Param1) return false;
      if (Param2 != other.Param2) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Param1 != 0D) hash ^= Param1.GetHashCode();
      if (Param2 != 0D) hash ^= Param2.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Param1 != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Param1);
      }
      if (Param2 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Param2);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Param1 != 0D) {
        size += 1 + 8;
      }
      if (Param2 != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(Processing other) {
      if (other == null) {
        return;
      }
      if (other.Param1 != 0D) {
        Param1 = other.Param1;
      }
      if (other.Param2 != 0D) {
        Param2 = other.Param2;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Param1 = input.ReadDouble();
            break;
          }
          case 17: {
            Param2 = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Processing message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("CANNY")] Canny = 0,
        [pbr::OriginalName("FACE")] Face = 1,
        [pbr::OriginalName("UPPER_BODY")] UpperBody = 2,
        [pbr::OriginalName("LOWER_BODY")] LowerBody = 4,
        [pbr::OriginalName("FULL_BODY")] FullBody = 5,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Connection : pb::IMessage<Connection> {
    private static readonly pb::MessageParser<Connection> _parser = new pb::MessageParser<Connection>(() => new Connection());
    public static pb::MessageParser<Connection> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.VideoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Connection() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Connection(Connection other) : this() {
      port_ = other.port_;
      cameras_ = other.cameras_;
    }

    public Connection Clone() {
      return new Connection(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private uint port_;
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "cameras" field.</summary>
    public const int CamerasFieldNumber = 2;
    private uint cameras_;
    public uint Cameras {
      get { return cameras_; }
      set {
        cameras_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Connection);
    }

    public bool Equals(Connection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Cameras != other.Cameras) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Cameras != 0) hash ^= Cameras.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Port);
      }
      if (Cameras != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cameras);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Cameras != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cameras);
      }
      return size;
    }

    public void MergeFrom(Connection other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Cameras != 0) {
        Cameras = other.Cameras;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Port = input.ReadUInt32();
            break;
          }
          case 16: {
            Cameras = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
